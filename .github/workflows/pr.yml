name: Build & Publish

on:
  push:
    branches:
      - develop
      - staging
      - master

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref_name }}
  cancel-in-progress: true

env:
  WORKING_DIRECTORY: .
  BUILD_OUTPUT_DIR: build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect lockfiles
        shell: bash
        run: |
          echo "Searching for lockfiles..."
          find . -maxdepth 3 -type f \( -name package-lock.json -o -name yarn.lock -o -name pnpm-lock.yaml \) -print || true

      # Removed cache: npm because no lockfile currently exists.
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Show tool versions
        run: |
          node -v
          npm -v

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            echo "package-lock.json found -> using npm ci"
            npm ci --no-audit --no-fund
          else
            echo "No package-lock.json found -> using npm install (non-deterministic)"
            npm install --no-audit --no-fund
          fi

      - name: Build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "${{ env.BUILD_OUTPUT_DIR }}"
          mkdir -p "${{ env.BUILD_OUTPUT_DIR }}"
          npm run build
          if [ -d dist ] && [ "${{ env.BUILD_OUTPUT_DIR }}" != "dist" ]; then
            cp -R dist/* "${{ env.BUILD_OUTPUT_DIR }}/" || true
          fi
          for f in additional_release_image_instructions.dockerfile deploy.env; do
            [ -f "$f" ] && cp "$f" "${{ env.BUILD_OUTPUT_DIR }}/"
          done
          echo "Pruning dev dependencies (best effort)..."
          if npm prune --omit=dev 2>/dev/null; then
            echo "Used: npm prune --omit=dev"
          else
            npm prune --production || true
          fi

      - name: Validate build output
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d "${{ env.WORKING_DIRECTORY }}/${{ env.BUILD_OUTPUT_DIR }}" ]; then
            echo "Build output directory missing."
            exit 1
          fi
          COUNT=$(find "${{ env.WORKING_DIRECTORY }}/${{ env.BUILD_OUTPUT_DIR }}" -type f | wc -l | tr -d ' ')
          if [ "$COUNT" -eq 0 ]; then
            echo "No files produced in build output directory."
            exit 1
          fi
          echo "Build produced $COUNT files."

      - name: Show build output (debug)
        if: ${{ success() }}
        shell: bash
        run: |
          echo "Build directory contents:"
          find "${{ env.WORKING_DIRECTORY }}/${{ env.BUILD_OUTPUT_DIR }}" -maxdepth 2 -type f | sed 's|^|  - |'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: ${{ env.WORKING_DIRECTORY }}/${{ env.BUILD_OUTPUT_DIR }}
          if-no-files-found: error
          retention-days: 7
