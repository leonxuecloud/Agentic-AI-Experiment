name: Build & Publish

on:
  push:
    branches:
      - develop
      - staging
      - master

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref_name }}
  cancel-in-progress: true

env:
  BUILD_OUTPUT_DIR: build

jobs:
  build:
    name: Build (Node conditional)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Node project
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Find first package.json (ignore node_modules if any)
          FILE=$(git ls-files | grep -E '(^|/)(package\.json)$' | grep -v node_modules || true)
          if [ -n "$FILE" ]; then
            DIR=$(dirname "$FILE")
            if [ "$DIR" = "." ]; then DIR="."; fi
            echo "Found package.json at: $FILE (directory: $DIR)"
            echo "has_node=true" >> "$GITHUB_OUTPUT"
            echo "project_dir=$DIR" >> "$GITHUB_OUTPUT"
            # Check for lockfile
            if [ -f "$DIR/package-lock.json" ]; then
              echo "has_lock=true" >> "$GITHUB_OUTPUT"
            else
              echo "has_lock=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No package.json found in repository."
            echo "has_node=false" >> "$GITHUB_OUTPUT"
            echo "project_dir=." >> "$GITHUB_OUTPUT"
            echo "has_lock=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Display detection summary
        run: |
          echo "has_node = ${{ steps.detect.outputs.has_node }}"
          echo "project_dir = ${{ steps.detect.outputs.project_dir }}"
          echo "has_lock = ${{ steps.detect.outputs.has_lock }}"

      - name: Setup Node
        if: steps.detect.outputs.has_node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # Only enable caching automatically if there is a lockfile (prevents unresolved path errors)
          cache: ${{ steps.detect.outputs.has_lock == 'true' && 'npm' || '' }}

      - name: Show tool versions
        if: steps.detect.outputs.has_node == 'true'
        run: |
          node -v
          npm -v

      - name: Install dependencies
        if: steps.detect.outputs.has_node == 'true'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ steps.detect.outputs.has_lock }}" = "true" ]; then
            echo "Using npm ci (lockfile present)."
            npm ci --no-audit --no-fund
          else
            echo "No package-lock.json; falling back to npm install (non-deterministic)."
            npm install --no-audit --no-fund
          fi

      - name: Build (Node project)
        if: steps.detect.outputs.has_node == 'true'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "${{ github.workspace }}/${{ env.BUILD_OUTPUT_DIR }}"
          mkdir -p "${{ github.workspace }}/${{ env.BUILD_OUTPUT_DIR }}"
          if npm run | grep -q '^  build'; then
            echo "Running npm run build"
            npm run build
          else
            echo "No build script found; copying source files (excluding node_modules) into build dir."
            rsync -a --exclude 'node_modules' ./ "${{ github.workspace }}/${{ env.BUILD_OUTPUT_DIR }}/"
          fi
          # If dist exists, merge it into build output
          if [ -d dist ]; then
            echo "Merging dist/ into build output"
            rsync -a dist/ "${{ github.workspace }}/${{ env.BUILD_OUTPUT_DIR }}/"
          fi
          echo "Pruning dev dependencies (best effort)..."
          if npm prune --omit=dev 2>/dev/null; then
            echo "Used: npm prune --omit=dev"
          else
            npm prune --production || true
          fi

      - name: Create placeholder build (non-Node repo)
        if: steps.detect.outputs.has_node != 'true'
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "${{ env.BUILD_OUTPUT_DIR }}"
          mkdir -p "${{ env.BUILD_OUTPUT_DIR }}"
          echo "This repository has no package.json; generated placeholder artifact on $(date -u)." > "${{ env.BUILD_OUTPUT_DIR }}/README.txt"
          echo "Repo tree snapshot:" >> "${{ env.BUILD_OUTPUT_DIR }}/README.txt"
          git ls-files >> "${{ env.BUILD_OUTPUT_DIR }}/README.txt"

      - name: Validate build output
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d "${{ env.BUILD_OUTPUT_DIR }}" ]; then
            echo "Build output directory missing."
            exit 1
          fi
          COUNT=$(find "${{ env.BUILD_OUTPUT_DIR }}" -type f | wc -l | tr -d ' ')
          if [ "$COUNT" -eq 0 ]; then
            echo "No files produced in build output directory."
            exit 1
          fi
          echo "Build produced $COUNT file(s)."

      - name: Show build output (debug)
        if: ${{ success() }}
        shell: bash
        run: |
          echo "Build directory contents:"
          find "${{ env.BUILD_OUTPUT_DIR }}" -maxdepth 3 -type f | sed 's|^|  - |'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: ${{ env.BUILD_OUTPUT_DIR }}
          if-no-files-found: error
          retention-days: 7
